% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ScriptHomemadeFunctions.R
\name{super_rich.group}
\alias{super_rich.group}
\title{Computation of species richness per groups}
\usage{
super_rich.group(MYDATA, MYGROUP)
}
\arguments{
\item{MYDATA}{A contingency table (typically, a matrix with species as columns and sites/releves as lines).}

\item{MYGROUP}{A factor with a length matching the number of rows of \code{MYDATA} (typically, a factor highlighting to which group each line belongs).}
}
\value{
Two list objects: one named \code{richness_group} and another named \code{topabun_group}. The former contains the specific richness for each group,
the latter contains the subset of data of each group (the aforementioned dataframes).
}
\description{
This functions gives the specific richness (mean and standard deviation) for each \emph{group} of data contained in the argument
\code{MYGROUP} (e.g. treatments, types of site, sites etc.). Additionally, \code{super_rich.group()} also returns a dataframe containing all the species
data for each \emph{group}, sorted out by decreasing order of abundance. \cr
For instance, if \code{MYDATA} is a dataframe containing the abundance (or presence/absence) of 100 species in 30 sites
belonging to three groups of equal size named A, B and C (detailed in \code{MYGROUP}); then \code{super_rich.group()} will return the mean
\strong{specific richness} of the A, B and C sites, and create 3 different dataframes:
\itemize{
\item One containing all the species of the 10 sites of group A (ordered by decreasing abundance);
\item One containing all the species of the 10 sites of group B (ordered by decreasing abundance);
\item One containing all the species of the 10 sites of group C (ordered by decreasing abundance).
}

Note that the last line of each of these dataframes is \emph{the sum of species abundances}: i.e. the line used to order the dataframes' columns!
}
\examples{
library(vegan)
data("dune")
data("dune.env")
# Creates a list containing the species richness per group.
aa <- super_rich.group(MYDATA = dune, MYGROUP = dune.env$Use)[[1]]
# Creates a list containing the subset dataframes for each group.
bb <- super_rich.group(MYDATA = dune, MYGROUP = dune.env$Use)[[2]]
# You can also create a list of lists by excluding the
# double-brackets: i.e. [[]]:
cc <- super_rich.group(MYDATA = dune, MYGROUP = dune.env$Use)
aa <- cc[[1]]
bb <- cc[[2]]
}
